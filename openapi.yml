openapi: "3.0.0"
info:
  version: "Beta"
  title: VitalFrog Performance API
  contact: 
    email: support@vitalfrog.com
    name: VitalFrog support
  description: This is the very basic api spec of the new VitalFrog performance api
  termsOfService: https://www.vitalfrog.com/blog/terms
servers:
  - url: https://api.vitalfrog.com/v2
paths:
  /reports:
    post:
      summary: Create a new report
      description: sd
      tags:
        - performance reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNewReportBody'
      responses:
        '202':
          description: New async report started. Runs async. Status can be fetched via uuid
          content:
            application/json:
              schema:
                type: object
                required: 
                  - metadata
                  - data
                properties:
                  metadata: 
                    $ref: "#/components/schemas/ReportMetadata"
        '200':
          description: New sync report created. Diretly returns report. May run for long time
          content:
            application/json:
              schema:
                type: object
                required: 
                  - metadata
                  - data
                properties:
                  metadata: 
                    $ref: "#/components/schemas/ReportMetadata"
                  data:
                    $ref: "#/components/schemas/Performance Report"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /reports/{uuid}:
    get:
      security: []
      summary: Get a all data of a single report
      description: sd
      parameters:
        - in: path
          name: uuid
          description: asd
          required: true
          schema:
            type: string
          example: 1dea0c0e-e1e0-11ec-8fea-0242ac120002
      tags:
        - performance reports
      responses:
        '200':
          description: Report data
          content:
            application/json:
             schema:
              type: object
              required: 
                - metadata
                - data
              properties:
                metadata: 
                  $ref: "#/components/schemas/ReportMetadata"
                data:
                  $ref: "#/components/schemas/Performance Report"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  securitySchemes:
    APIToken:    
      type: http
      scheme: bearer
      bearerFormat: "firebaseAccessToken"
  schemas:
    CreateNewReportBody:
      type: object
      required:
        - config
        - async
      properties:
        config:
          $ref: "#/components/schemas/ReportConfig"
        async:
          type: boolean
          description: Run the report async and directly return with a 202
    ReportConfig: 
      type: object
      required:
        - target
      properties:
        countries: 
          type: object
          required:
            - list
          properties:
            mode:
              type: string
              description: How to handle the 'list'. If 'allow_list' than new countries is allowed, but the ones on the list. If 'block_list' then all countries are allowd.
              default: block_list
              enum:
                - block_list
                - allow_list
            list:
              type: array
              items:
                $ref: "#/components/schemas/Country"
        performance_budets:
          description: On what budgets to alert on.
          type: array
          items:
            $ref: "#/components/schemas/PerformanceBudget"
        devices:
          type: array
          items: 
            $ref: "#/components/schemas/Device"
        target: 
          type: object
          required:
            - host
            - paths
          properties:
            host: 
              type: string
              example: www.vitalfrog.com
            paths:
              type: object
              anyOf:
                - $ref: "#/components/schemas/AllPaths"
                - $ref: "#/components/schemas/RandomPathSelection"
                - $ref: "#/components/schemas/ManualPathSelection"
        http:
          type: object
          description: Additional http request configurations
          properties:
            extra_headers:
              type: array
              description: Additional headers to configure on the request. Mostly used for authentication
              items:
                type: object
                required:
                  - header
                  - value
                properties:
                  header:
                    type: string
                  value:
                    type: string
            basic_auth:
              type: object
              description: Basic auth credentials to configure
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
    AllPaths:
      type: object
      description: VitalFrog will crawl all paths it can find and run performance report on it
      required:
        - mode
      properties:
        mode:
          type: string
          pattern: '^allPaths$'
    RandomPathSelection:
      type: object
      description: VitalFrog will select a random sample of paths it can find and run performance report on it
      required:
        - mode
        - count
      properties:
        mode:
          type: string
          pattern: '^randomSelection$'
        count:
          type: integer
          default: 10
          description: How many paths to maximum crawl. If -1 this is equal to "allPaths" mode
    ManualPathSelection:
      type: object
      description: VitalFrog will run performance report on the manual configured paths
      required:
        - mode
        - paths
      properties:
        mode:
          type: string
          pattern: '^manual$'
        paths:
          type: array
          items:
            type: string
            pattern: "^/.*$"
    Device:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum:
            - desktop
            - mobile
    PerformanceBudget:
      type: object
      required:
        - metric
        - error
      properties:
        metric:
          type: string
          enum: 
            - first_contentful_paint
            - largest_contentful_paint
            - first_meaningful_paint_ms
            - speed_index_ms
            - total_blocking_time_ms
            - max_potential_fid_ms
            - cumulative_layout_shift
            - server_response_time_ms
            - interactive_ms
            - big_payloads.total_bytes
        mode:
          description: What to alert on. Above or below the threshold
          type: string
          default: "above"
          enum:
            - "above"
            - "below"
        warning:
          type: integer
          description: If metric is above/below (depending on 'mode'). Return a warning
        error:
          type: integer
          description: If metric is above/below (depending on 'mode'). Return an error 
    ReportMetadata:
      type: object
      required:
        - uuid
        - created
        - config
        - cost
      properties:
        uuid:
          type: string
          example: 1dea0c0e-e1e0-11ec-8fea-0242ac120002
        created:
          type: string
          format: date-time
        cost: 
          type: integer
          description: Cost in credits for this report
        config: 
          $ref: "#/components/schemas/ReportConfig"
    Country:
      type: object
      required:
        - code
      properties:
        name:
          type: string
          example: "Germany"
        code:
          type: string
          example: "DE"
    Error:
      type: object
      required:
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Element:
      type: object
      required:
        - selector
        - snipper
      properties:
        selector:
          type: string
          example: div#particlesJS > div.max-w-screen-xl > div.text-center > p.text-xl
        snippet: 
          type: string
          example: <p class=text-xl text-gray-600 xl:text-2xl mb-4>
    Network Request: 
      type: object
      required:
        - url
        - size_byte
        - start_time_ms
        - load_time_ms
      properties:
        url: 
          type: string
          example: https://www.vitalfrog.com/
        size_byte: 
          type: integer
          format: int32
          example: 16202
        start_time_ms: 
          type: integer
          format: int32
          example: 0
        load_time_ms: 
          type: integer
          format: int32
          example: 131
    Payload:
      type: object
      required:
        - url
        - total_bytes
      properties: 
        url: 
          type: string
          example: https://www.vitalfrog.com/images/road.jpg
        total_bytes: 
          type: integer
          format: int32
          example: 1027876
    Performance Report: 
      type: object
      required:
        - first_contentful_paint
        - largest_contentful_paint
        - first_meaningful_paint_ms
        - speed_index_ms
        - total_blocking_time_ms
        - max_potential_fid_ms
        - server_response_time_ms
        - interactive_ms
        - network_requests
      properties: 
        first_contentful_paint: 
          type: object
          properties: 
            value_ms: 
              type: integer
              format: int32
              example: 937
            elements:
              type: array
              items:
                $ref: "#/components/schemas/Element"
        largest_contentful_paint: 
          type: object
          required:
            - value_ms
            - element
          properties: 
            value_ms: 
              type: integer
              format: int32
              example: 3124
            element: 
              $ref: "#/components/schemas/Element"
            lazy_loaded: 
              type: boolean
            image_preloaded: 
              type: boolean
        first_meaningful_paint_ms: 
          type: integer
          format: int32
          example: 2195
        speed_index_ms: 
          type: integer
          format: int32
          example: 937
        total_blocking_time_ms: 
          type: integer
          format: int32
          example: 0
        max_potential_fid_ms: 
          type: integer
          format: int32
          example: 16
        cumulative_layout_shift: 
          type: object
          required:
            - value
          properties: 
            value: 
              type: integer
              format: int32
              example: 0
            elements:
              type: array
              items:
                $ref: "#/components/schemas/Element"
        server_response_time_ms: 
          type: integer
          format: int32
          example: 86
        interactive_ms: 
          type: integer
          format: int32
          example: 2195
        network_requests: 
          type: array
          items: 
            $ref: "#/components/schemas/Network Request"
        big_payloads: 
          type: object
          required:
            - total_bytes
          properties: 
            total_bytes: 
              type: integer
              format: int32
              example: 2802127
            payloads: 
              type: array
              items: 
                $ref: "#/components/schemas/Payload"
security:
  - APIToken: []         # use the same name as above